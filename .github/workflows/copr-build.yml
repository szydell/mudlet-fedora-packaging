name: COPR Build  

on:  
  schedule:  
    - cron: '0 0 * * *'  # Run daily at midnight  
  workflow_dispatch:  
    inputs:  
      force_rebuild:  
        description: 'Force rebuild even if version has not changed'  
        required: true  
        type: boolean  
        default: false  
  push:  
    paths:  
      - 'mudlet.spec'    # Trigger on spec file changes  

permissions:  
  contents: write  

jobs:  
  check-and-build:  
    runs-on: ubuntu-latest  
    container:  
      image: fedora:latest  
      options: --privileged  

    steps:  
      - name: Install required packages  
        run: |  
          dnf install -y copr-cli jq curl git rpmdevtools rpm-build  

      - name: Configure git safe directory  
        run: git config --global --add safe.directory '*'  

      - uses: actions/checkout@v4  
        with:  
          token: ${{ secrets.GITHUB_TOKEN }}  
      
      - name: Check latest Mudlet version  
        id: check_version  
        run: |  
          # Fetch all tags, sort them by version, and get the latest one  
          LATEST_TAG=$(curl -s https://api.github.com/repos/Mudlet/Mudlet/tags | jq -r '.[].name' | grep '^Mudlet-[0-9]' | sort -V | tail -n1)  
          LATEST_VERSION=${LATEST_TAG#Mudlet-}  
          CURRENT_VERSION=$(grep "Version:" mudlet.spec | awk '{print $2}')  
          CURRENT_RELEASE=$(grep "Release:" mudlet.spec | awk '{print $2}' | cut -d'-' -f1)  
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV  
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV  
          echo "CURRENT_RELEASE=$CURRENT_RELEASE" >> $GITHUB_ENV  
          if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then  
            echo "UPDATE_NEEDED=true" >> $GITHUB_ENV  
          else  
            echo "UPDATE_NEEDED=false" >> $GITHUB_ENV  
          fi  
          echo "Latest version from tags: $LATEST_VERSION"  
          echo "Current version: $CURRENT_VERSION"  
          echo "Current release: $CURRENT_RELEASE"  

      - name: Update spec file if new version or rebuild  
        run: |  
          # Configure git  
          git config --global user.email "github-actions@github.com"  
          git config --global user.name "GitHub Actions"  

          # If a new version is detected, reset Release to 1  
          if [ "${{ env.UPDATE_NEEDED }}" == "true" ]; then  
            sed -i "s/Version:.*/Version:        ${LATEST_VERSION}/" mudlet.spec  
            sed -i "s/Release:.*/Release:        1%{?dist}/" mudlet.spec  
            TODAY=$(date +"%a %b %d %Y")  
            sed -i "s/^* .*/* ${TODAY} Package Maintainer <your@email.com> - ${LATEST_VERSION}-1/" mudlet.spec  
            sed -i "s/- Initial package/- Update to ${LATEST_VERSION}/" mudlet.spec  
          else  
            # If rebuilding the same version, increment the Release number  
            NEW_RELEASE=$((CURRENT_RELEASE + 1))  
            sed -i "s/Release:.*/Release:        ${NEW_RELEASE}%{?dist}/" mudlet.spec  
            TODAY=$(date +"%a %b %d %Y")  
            sed -i "s/^* .*/* ${TODAY} Package Maintainer <your@email.com> - ${CURRENT_VERSION}-${NEW_RELEASE}/" mudlet.spec  
            sed -i "s/- Initial package/- Rebuild version ${CURRENT_VERSION}-${NEW_RELEASE}/" mudlet.spec  
          fi  

      - name: Commit and push changes  
        if: env.UPDATE_NEEDED == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force_rebuild == 'true')  
        run: |  
          # Add and commit changes to the spec file  
          git add mudlet.spec  
          if [ "${{ env.UPDATE_NEEDED }}" == "true" ]; then  
            git commit -m "Update Mudlet to version ${{ env.LATEST_VERSION }}"  
          else  
            git commit -m "Rebuild Mudlet version ${{ env.CURRENT_VERSION }}-${NEW_RELEASE}"  
          fi  

          # Push changes back to the repository  
          git push origin HEAD  

      - name: Download sources  
        run: |  
          spectool -g mudlet.spec  

      - name: Configure COPR token  
        run: |  
          mkdir -p ~/.config  
          echo '${{ secrets.COPR_CONFIG }}' > ~/.config/copr  

      - name: Trigger COPR build  
        if: env.UPDATE_NEEDED == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force_rebuild == 'true')  
        id: copr_build  
        run: |  
          echo "Starting COPR build..."  
          copr-cli build ${{ secrets.COPR_PROJECT }} mudlet.spec | tee build_output.txt  
          BUILD_ID=$(grep -o 'Build ID: [0-9]*' build_output.txt | cut -d' ' -f3)  
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT  
          echo "Build details: https://copr.fedorainfracloud.org/coprs/${{ secrets.COPR_USERNAME }}/${{ secrets.COPR_PROJECT }}/build/$BUILD_ID/"  
          if grep -q "succeeded" build_output.txt; then  
            echo "Build succeeded!"  
          else  
            echo "Build failed!"  
            exit 1  
          fi  

      - name: Report build status  
        if: always()  
        run: |  
          if [ "${{ env.UPDATE_NEEDED }}" == "true" ]; then  
            echo "Build triggered for version ${{ env.LATEST_VERSION }}"  
          else  
            echo "No update needed. Current version: ${{ env.CURRENT_VERSION }}"  
            echo "Rebuild triggered. Current release: $((CURRENT_RELEASE + 1))"

